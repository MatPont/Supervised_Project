}
plot_tsne(tsne)
tsne$Y
all_pred <- c()
index <- c()
data_y <- test_y
data_x <- test_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
?add.image
??add.image
library("fields")
?add.image
library("fields")
all_pred <- c()
index <- c()
data_y <- test_y
library("Rmatlab")
install.packages("Rmatlab")
library("R.matlab")
train_x = readMat("../Results/ae/ae_encoded.mat")
train_x
train_x$X
dim(train_x$X)
# load images
train_x = load_image_file("../Datasets/train-images-idx3-ubyte")
train_x
dim(train_x)
train_x = readMat("../Results/ae/ae_encoded.mat")$X
tsne <- Rtsne(train_x, verbose = TRUE)
as.matrix(train_x)
dim(as.matrix(train_x))
train_x = as.matrix(readMat("../Results/ae/ae_encoded.mat")$X)
tsne <- Rtsne(train_x, verbose = TRUE)
getwd()
plot_tsne <- function(tsne){
colors = rainbow(length(unique(train_y)))
names(colors) = unique(train_y)
kl <- round(tsne$itercosts[length(tsne$itercosts)], digits = 2)
plot_name <- paste("t-SNE with KL-divergence = ", kl, sep ="")
plot(tsne$Y, xlab = "Comp. 1", ylab = "Comp. 2", col = colors[train_y], main = plot_name)
}
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
e
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
conflict <- FALSE
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
warnings()
plot_tsne(tsne)
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
conflict <- FALSE
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
# load images
train_x = load_image_file("../Datasets/train-images-idx3-ubyte")
train_x_enc = as.matrix(readMat("../Results/ae/ae_encoded.mat")$X)
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
conflict <- FALSE
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
data_x
data_x[1,]
colors
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
conflict <- FALSE
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
?add.image
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 50) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
conflict <- FALSE
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 50) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 10) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 20) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
plot_tsne <- function(tsne){
colors = rainbow(length(unique(train_y)))
names(colors) = unique(train_y)
kl <- round(tsne$itercosts[length(tsne$itercosts)], digits = 2)
plot_name <- paste("t-SNE with KL-divergence = ", kl, sep ="")
plot_name <- NULL
plot(tsne$Y, xlab = "Comp. 1", ylab = "Comp. 2", col = colors[train_y], main = plot_name)
}
dev.off()
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
layout(1:2)
plot_tsne(tsne)
plot_tsne(tsne)
dev.off()
layout(matrix(1:2), byrow=T)
plot_tsne(tsne)
plot_tsne(tsne)
?matrix
dev.off()
layout(matrix(1:2, byrow=T))
plot_tsne(tsne)
plot_tsne(tsne)
dev.off()
layout(matrix(1:2, byrow=F))
plot_tsne(tsne)
plot_tsne(tsne)
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
tsne$itercosts
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
flame = read.csv("../Datasets/flame.txt", header=NULL)
flame = read.csv("../Datasets/flame.txt", header=F)
dim(flame)
flame = read.csv("../Datasets/flame.txt", header=F, sep="\t")
dim(flame)
plot(flame[1,2], col=flame[3])
dev.off()
plot(flame[1,2], col=flame[3])
plot(flame[,1:2], col=flame[,3])
plot(flame[,1:2], col=flame[,3], pch=2)
plot(flame[,1:2], col=flame[,3], pch=3)
plot(flame[,1:2], col=flame[,3], pch=6)
plot(flame[,1:2], col=flame[,3], pch=4)
plot(flame[,1:2], col=flame[,3], pch=21)
plot(flame[,1:2], col=flame[,3], pch=20)
flame = read.csv("../Datasets/flame.txt", header=F, sep="\t")
dim(flame)
plot(flame[,1:2], col=flame[,3], pch=20)
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame")
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame", xlab=NULL)
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame", xlab=F)
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame", xlab="")
spiral = read.csv("../Datasets/spiral.txt", header=F, sep="\t")
dim(spiral)
agg = read.csv("../Datasets/Aggregation.txt", header=F, sep="\t")
dim(agg)
layout(matrix(1:3, nrow=1))
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame", xlab="", ylab="")
plot(spiral[,1:2], col=flame[,3], pch=20, main="Spiral", xlab="", ylab="")
plot(agg[,1:2], col=flame[,3], pch=20, main="Aggregation", xlab="", ylab="")
layout(matrix(1:3, nrow=1))
plot(flame[,1:2], col=flame[,3], pch=20, main="Flame", xlab="", ylab="")
plot(spiral[,1:2], col=spiral[,3], pch=20, main="Spiral", xlab="", ylab="")
plot(agg[,1:2], col=agg[,3], pch=20, main="Aggregation", xlab="", ylab="")
