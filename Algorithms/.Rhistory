plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
lambda = 1
lambda = diag(lambda,dim(data)[2],dim(data)[2])
data_cov=cov(data) + lambda
res_corr_filter = solve(data_cov) * (-1)
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep_pos <- 1
to_keep_neg <- to_keep_pos + 2
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep_pos) & my_order > to_keep_neg | (my_order < to_keep_neg & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
install.packages(c("plspm", "rstudioapi"))
install.packages(c("ggraph", "Hmisc", "igraph", "miic", "rstudioapi"))
install.packages(c("corrplot", "factoextra", "fields", "rstudioapi"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#################################################
# Functions
#################################################
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
visa_cleaned <- read.csv(file = "../Datasets/VisaPremier_cleaned.txt", row.names=1)
dim(visa_cleaned)
data_x <- visa_cleaned[, -dim(visa_cleaned)[2]]
data_y <- visa_cleaned[, dim(visa_cleaned)[2]]
corrplot::corrplot(corr(data_x))
corrplot::corrplot(cor(data_x))
data_x
as.numerix(data_x)
as.numeric(data_x)
typeof(data_x)
data_x
as.matrix(data_x)
dim(as.matrix(data_x))
cor(as.matrix(data_x))
cor(visa_cleaned)
visa_cleaned <- read.csv(file = "../Datasets/VisaPremier_cleaned.txt", row.names=1)
dim(visa_cleaned)
data_x <- visa_cleaned[, -dim(visa_cleaned)[2]]
data_y <- visa_cleaned[, dim(visa_cleaned)[2]]
quali_names <- c("departem", "ptvente", "sexe", "sitfamil", "csp", "sexer", "codeqlt")
quali_sup_indexes <- c(1:length(names(visa_cleaned)))[names(visa_cleaned) %in% quali_names]
quali_sup_indexes
data_x[,-quali_sup_indexes]
as.numeric(data_x[,-quali_sup_indexes])
cor(data_x[,-quali_sup_indexes])
corrplot(cor(data_x[,-quali_sup_indexes]))
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]))
#library(caret)
library(corrplot)
?corrplot::corrplot
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "ward.D2")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "ward.D")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", diag = F)
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="upper")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="lower")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="upper")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="lower")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="upper")
corrplot::corrplot(cor(data_x[,-quali_sup_indexes]), hclust.method = "average", type="upper", diag=F)
cor(data_x[,-quali_sup_indexes])
mycor <- cor(data_x[,-quali_sup_indexes])
mycor[abs(mycor) > 0.8]
which(abs(mycor) > 0.8)
dim(mycor)
mycor[1]
names(mycor[1])
colnames(mycor[1])
rownames(mycor[1])
mycor
typeof(mycor)
as.data.frame(mycor)[1]
dim(as.data.frame(mycor))
t <- as.data.frame(mycor)
t
which(abs(t) > 0.5)
t[which(abs(t) > 0.5)]
(abs(t) > 0.5)
data_x
names(data_x)
data_x[,"codeqlt"]
boxplot(data_x[,"codeqlt"])
plot(data_x[,"codeqlt"])
as.numeric(data_x[,"codeqlt"])
boxplot(as.numeric(data_x[,"codeqlt"]))
data_y
boxplot(as.numeric(data_x[which(data_y == 0), "codeqlt"]))
boxplot(as.numeric(data_x[which(data_y == 1), "codeqlt"]))
boxplot(as.numeric(data_x[which(data_y == 1), "codeqlt"]), as.numeric(data_x[which(data_y == 0), "codeqlt"]))
as.numeric(data_x[which(data_y == 1), "codeqlt"])
sum(as.numeric(data_x[which(data_y == 1), "codeqlt"]) == 1)
sum(as.numeric(data_x[which(data_y == 0), "codeqlt"]) == 1)
plot(data_x[,c("mteparmo, aveparmo")])
names(data_x)
data_x[, c("mteparmo, aveparmo")]
data_x[, "aveparmo"]
data_x[, c("mteparmo", "aveparmo")]
plot(data_x[, c("mteparmo", "aveparmo")])
plot(data_x[, c("mteparmo", "aveparmo")], col=data_y)
plot(data_x[, c("mteparmo", "aveparmo")], col=data_y, pch=19)
plot(data_x[, c("mteparmo", "aveparmo")], col=data_y+1, pch=19)
plot(data_x[data_y==0, c("mteparmo", "aveparmo")], pch=19)
plot(data_x[data_y==1, c("mteparmo", "aveparmo")], pch=19)
cor
mycor
t <- which(abs(mycor) > 0.5, arr.ind=T)
t
diag(mycor) <- 0
which(abs(mycor) > 0.5, arr.ind=T)
row.names(mycor[t[,1], ])
names(mycor[t[,2]])
colnames(mycor[t[,2]])
?which
t
colnames(mycor[, t[,2]])
row.names(mycor[t[,1], ])
colnames(mycor[, t[,2]])
diag(mycor) <- 0
t <- which(abs(mycor) > 0.5, arr.ind=T)
row.names(mycor[t[,1], ])
colnames(mycor[, t[,2]])
mycor[t]
diag(mycor) <- 0
t <- which(abs(mycor) > 0.75, arr.ind=T)
row.names(mycor[t[,1], ])
colnames(mycor[, t[,2]])
mycor[t]
cbind(row.names(mycor[t[,1], ]), colnames(mycor[, t[,2]]), mycor[t])
cbind(row.names(mycor[t[,1], ]), colnames(mycor[, t[,2]]), mycor[t])
t <- cbind(row.names(mycor[t[,1], ]), colnames(mycor[, t[,2]]), mycor[t])
t
sort(t[,3])
sort(as.numeric(t[,3]))
as.numeric(t[,3])
rank(as.numeric(t[,3]))
order(as.numeric(t[,3]))
t[order(as.numeric(t[,3])), ]
t
c(t[,1], t[,2])
unique(c(t[,1], t[,2]))
data_x
data_x[,"engagemt"]
data_x[,"engageml"]
